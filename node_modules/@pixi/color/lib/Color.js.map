{"version":3,"file":"Color.js","sources":["../src/Color.ts"],"sourcesContent":["import { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\n\nimport type {\n    AnyColor,\n    HslaColor,\n    HslColor,\n    HsvaColor,\n    HsvColor,\n    RgbaColor,\n    RgbColor,\n} from 'colord/types';\n\nextend([namesPlugin]);\n\n/**\n * Value types for the constructor of {@link PIXI.Color}.\n * These types are extended from [colord](https://www.npmjs.com/package/colord) with some PixiJS-specific extensions.\n *\n * Possible value types are:\n * - [Color names](https://www.w3.org/TR/css-color-4/#named-colors):\n *   `'red'`, `'green'`, `'blue'`, `'white'`, etc.\n * - RGB hex integers (`0xRRGGBB`):\n *   `0xff0000`, `0x00ff00`, `0x0000ff`, etc.\n * - [RGB(A) hex strings](https://www.w3.org/TR/css-color-4/#hex-notation):\n *   - 6 digits (`RRGGBB`): `'ff0000'`, `'#00ff00'`, `'0x0000ff'`, etc.\n *   - 3 digits (`RGB`): `'f00'`, `'#0f0'`, `'0x00f'`, etc.\n *   - 8 digits (`RRGGBBAA`): `'ff000080'`, `'#00ff0080'`, `'0x0000ff80'`, etc.\n *   - 4 digits (`RGBA`): `'f008'`, `'#0f08'`, `'0x00f8'`, etc.\n * - RGB(A) objects:\n *   `{ r: 255, g: 0, b: 0 }`, `{ r: 255, g: 0, b: 0, a: 0.5 }`, etc.\n * - [RGB(A) strings](https://www.w3.org/TR/css-color-4/#rgb-functions):\n *   `'rgb(255, 0, 0)'`, `'rgb(100% 0% 0%)'`, `'rgba(255, 0, 0, 0.5)'`, `'rgba(100% 0% 0% / 50%)'`, etc.\n * - RGB(A) arrays:\n *   `[1, 0, 0]`, `[1, 0, 0, 0.5]`, etc.\n * - RGB(A) Float32Array:\n *   `new Float32Array([1, 0, 0])`, `new Float32Array([1, 0, 0, 0.5])`, etc.\n * - RGB(A) Uint8Array:\n *   `new Uint8Array([255, 0, 0])`, `new Uint8Array([255, 0, 0, 128])`, etc.\n * - RGB(A) Uint8ClampedArray:\n *   `new Uint8ClampedArray([255, 0, 0])`, `new Uint8ClampedArray([255, 0, 0, 128])`, etc.\n * - HSL(A) objects:\n *   `{ h: 0, s: 100, l: 50 }`, `{ h: 0, s: 100, l: 50, a: 0.5 }`, etc.\n * - [HSL(A) strings](https://www.w3.org/TR/css-color-4/#the-hsl-notation):\n *   `'hsl(0, 100%, 50%)'`, `'hsl(0deg 100% 50%)'`, `'hsla(0, 100%, 50%, 0.5)'`, `'hsla(0deg 100% 50% / 50%)'`, etc.\n * - HSV(A) objects:\n *   `{ h: 0, s: 100, v: 100 }`, `{ h: 0, s: 100, v: 100, a: 0.5 }`, etc.\n * - {@link PIXI.Color} objects.\n * @memberof PIXI\n * @since 7.2.0\n */\nexport type ColorSource = string | number | number[] | Float32Array | Uint8Array | Uint8ClampedArray\n| HslColor | HslaColor | HsvColor | HsvaColor | RgbColor | RgbaColor | Color |\n// eslint-disable-next-line @typescript-eslint/ban-types\nNumber;\n\n/**\n * Color utility class.\n * @example\n * import { Color } from 'pixi.js';\n * new Color('red').toArray(); // [1, 0, 0, 1]\n * new Color(0xff0000).toArray(); // [1, 0, 0, 1]\n * new Color('ff0000').toArray(); // [1, 0, 0, 1]\n * new Color('#f00').toArray(); // [1, 0, 0, 1]\n * new Color('0xff0000ff').toArray(); // [1, 0, 0, 1]\n * new Color('#f00f').toArray(); // [1, 0, 0, 1]\n * new Color({ r: 255, g: 0, b: 0, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('rgb(255, 0, 0, 0.5)').toArray(); // [1, 0, 0, 0.5]\n * new Color([1, 1, 1]).toArray(); // [1, 1, 1, 1]\n * new Color([1, 0, 0, 0.5]).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Float32Array([1, 0, 0, 0.5])).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Uint8Array([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color(new Uint8ClampedArray([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color({ h: 0, s: 100, l: 50, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('hsl(0, 100%, 50%, 50%)').toArray(); // [1, 0, 0, 0.5]\n * new Color({ h: 0, s: 100, v: 100, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * @memberof PIXI\n * @since 7.2.0\n */\nexport class Color\n{\n    /**\n     * Default Color object for static uses\n     * @example\n     * import { Color } from 'pixi.js';\n     * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n     */\n    static readonly shared = new Color();\n\n    /**\n     * Temporary Color object for static uses internally.\n     * As to not conflict with Color.shared.\n     * @ignore\n     */\n    private static readonly temp = new Color();\n\n    /** Pattern for hex strings */\n    private static readonly HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\n\n    /** Internal color source, from constructor or set value */\n    private _value: Exclude<ColorSource, Color> | null;\n\n    /** Normalized rgba component, floats from 0-1 */\n    private _components: Float32Array;\n\n    /** Cache color as number */\n    private _int: number;\n\n    /**\n     * @param {PIXI.ColorSource} value - Optional value to use, if not provided, white is used.\n     */\n    constructor(value: ColorSource = 0xffffff)\n    {\n        this._value = null;\n        this._components = new Float32Array(4);\n        this._components.fill(1);\n        this._int = 0xffffff;\n        this.value = value;\n    }\n\n    /** Get red component (0 - 1) */\n    get red(): number\n    {\n        return this._components[0];\n    }\n\n    /** Get green component (0 - 1) */\n    get green(): number\n    {\n        return this._components[1];\n    }\n\n    /** Get blue component (0 - 1) */\n    get blue(): number\n    {\n        return this._components[2];\n    }\n\n    /** Get alpha component (0 - 1) */\n    get alpha(): number\n    {\n        return this._components[3];\n    }\n\n    /**\n     * Set the value, suitable for chaining\n     * @param value\n     * @see PIXI.Color.value\n     */\n    setValue(value: ColorSource): this\n    {\n        this.value = value;\n\n        return this;\n    }\n\n    /**\n     * The current color source.\n     *\n     * When setting:\n     * - Setting to an instance of `Color` will copy its color source and components.\n     * - Otherwise, `Color` will try to normalize the color source and set the components.\n     *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n     *\n     * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n     * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n     *\n     * When getting:\n     * - A return value of `null` means the previous value was overridden (e.g., {@link PIXI.Color.multiply multiply},\n     *   {@link PIXI.Color.premultiply premultiply} or {@link PIXI.Color.round round}).\n     * - Otherwise, the color source used when setting is returned.\n     * @type {PIXI.ColorSource}\n     */\n    set value(value: ColorSource | null)\n    {\n        // Support copying from other Color objects\n        if (value instanceof Color)\n        {\n            this._value = value._value;\n            this._int = value._int;\n            this._components.set(value._components);\n        }\n        else if (value === null)\n        {\n            throw new Error('Cannot set PIXI.Color#value to null');\n        }\n        else if (this._value !== value)\n        {\n            this.normalize(value);\n            this._value = value;\n        }\n    }\n    get value(): Exclude<ColorSource, Color> | null\n    {\n        return this._value;\n    }\n\n    /**\n     * Convert to a RGBA color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n     */\n    toRgba(): RgbaColor\n    {\n        const [r, g, b, a] = this._components;\n\n        return { r, g, b, a };\n    }\n\n    /**\n     * Convert to a RGB color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n     */\n    toRgb(): RgbColor\n    {\n        const [r, g, b] = this._components;\n\n        return { r, g, b };\n    }\n\n    /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n    toRgbaString(): string\n    {\n        const [r, g, b] = this.toUint8RgbArray();\n\n        return `rgba(${r},${g},${b},${this.alpha})`;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of clamped uint8 values (0 to 255).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toUint8RgbArray(); // returns [255, 255, 255]\n     * @param {number[]|Uint8Array|Uint8ClampedArray} [out] - Output array\n     */\n    toUint8RgbArray(): number[];\n    toUint8RgbArray<T extends (number[] | Uint8Array | Uint8ClampedArray)>(out: T): T;\n    toUint8RgbArray<T extends (number[] | Uint8Array | Uint8ClampedArray)>(out?: T): T\n    {\n        const [r, g, b] = this._components;\n\n        out = out ?? [] as number[] as T;\n\n        out[0] = Math.round(r * 255);\n        out[1] = Math.round(g * 255);\n        out[2] = Math.round(b * 255);\n\n        return out;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgbArray(); // returns [1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    toRgbArray(): number[];\n    toRgbArray<T extends (number[] | Float32Array)>(out: T): T;\n    toRgbArray<T extends (number[] | Float32Array)>(out?: T): T\n    {\n        out = out ?? [] as number[] as T;\n        const [r, g, b] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n\n        return out;\n    }\n\n    /**\n     * Convert to a hexadecimal number.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toNumber(); // returns 16777215\n     */\n    toNumber(): number\n    {\n        return this._int;\n    }\n\n    /**\n     * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n     * @returns {number} - The color as a number in little endian format.\n     */\n    toLittleEndianNumber(): number\n    {\n        const value = this._int;\n\n        return (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * Multiply with another color. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param {PIXI.ColorSource} value - The color to multiply by.\n     */\n    multiply(value: ColorSource): this\n    {\n        const [r, g, b, a] = Color.temp.setValue(value)._components;\n\n        this._components[0] *= r;\n        this._components[1] *= g;\n        this._components[2] *= b;\n        this._components[3] *= a;\n\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Converts color to a premultiplied alpha format. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param alpha - The color to multiply by.\n     * @param [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {PIXI.Color} - Itself.\n     */\n    premultiply(alpha: number, applyToRGB = true): this\n    {\n        if (applyToRGB)\n        {\n            this._components[0] *= alpha;\n            this._components[1] *= alpha;\n            this._components[2] *= alpha;\n        }\n        this._components[3] = alpha;\n\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Premultiplies alpha with current color.\n     * @param {number} alpha - floating point alpha (0.0-1.0)\n     * @returns {number} tint multiplied by alpha\n     */\n    toPremultiplied(alpha: number): number\n    {\n        if (alpha === 1.0)\n        {\n            return (alpha * 255 << 24) + this._int;\n        }\n        if (alpha === 0.0)\n        {\n            return 0;\n        }\n        let r = ((this._int >> 16) & 0xFF);\n        let g = ((this._int >> 8) & 0xFF);\n        let b = (this._int & 0xFF);\n\n        r = ((r * alpha) + 0.5) | 0;\n        g = ((g * alpha) + 0.5) | 0;\n        b = ((b * alpha) + 0.5) | 0;\n\n        return (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n    }\n\n    /**\n     * Convert to a hexidecimal string.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHex(); // returns \"#ffffff\"\n     */\n    toHex(): string\n    {\n        const hexString = this._int.toString(16);\n\n        return `#${'000000'.substring(0, 6 - hexString.length) + hexString}`;\n    }\n\n    /**\n     * Convert to a hexidecimal string with alpha.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHexa(); // returns \"#ffffffff\"\n     */\n    toHexa(): string\n    {\n        const alphaValue = Math.round(this._components[3] * 255);\n        const alphaString = alphaValue.toString(16);\n\n        return this.toHex() + '00'.substring(0, 2 - alphaString.length) + alphaString;\n    }\n\n    /**\n     * Set alpha, suitable for chaining.\n     * @param alpha\n     */\n    setAlpha(alpha: number): this\n    {\n        this._components[3] = alpha;\n\n        return this;\n    }\n\n    /**\n     * Rounds the specified color according to the step. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param step - Number of steps which will be used as a cap when rounding colors\n     */\n    round(step: number): this\n    {\n        const [r, g, b] = this._components;\n\n        this._components.set([\n            Math.min(255, (r / step) * step),\n            Math.min(255, (g / step) * step),\n            Math.min(255, (b / step) * step),\n        ]);\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Convert to an [R, G, B, A] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toArray(); // returns [1, 1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    toArray(): number[];\n    toArray<T extends (number[] | Float32Array)>(out: T): T;\n    toArray<T extends (number[] | Float32Array)>(out?: T): T\n    {\n        out = out ?? [] as number[] as T;\n        const [r, g, b, a] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n        out[3] = a;\n\n        return out;\n    }\n\n    /**\n     * Normalize the input value into rgba\n     * @param value - Input value\n     */\n    private normalize(value: Exclude<ColorSource, Color>): void\n    {\n        let components: number[] | undefined;\n\n        // Number is a primative so typeof works fine, but in the case\n        // that someone creates a class that extends Number, we also\n        // need to check for instanceof Number\n        if ((typeof value === 'number' || value instanceof Number) && value >= 0 && value <= 0xffffff)\n        {\n            const int = value as number; // cast required because instanceof Number is ambiguous for TS\n\n            components = [\n                ((int >> 16) & 0xFF) / 255,\n                ((int >> 8) & 0xFF) / 255,\n                (int & 0xFF) / 255,\n                1.0\n            ];\n        }\n        else if ((Array.isArray(value) || value instanceof Float32Array)\n            // Can be rgb or rgba\n            && value.length >= 3 && value.length <= 4\n            // make sure all values are 0 - 1\n            && value.every((v) => v <= 1 && v >= 0))\n        {\n            const [r, g, b, a = 1.0] = value;\n\n            components = [r, g, b, a];\n        }\n        else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray)\n            // Can be rgb or rgba\n            && value.length >= 3 && value.length <= 4)\n        {\n            const [r, g, b, a = 255] = value;\n\n            components = [r / 255, g / 255, b / 255, a / 255];\n        }\n        else if (typeof value === 'string' || typeof value === 'object')\n        {\n            if (typeof value === 'string')\n            {\n                const match = Color.HEX_PATTERN.exec(value);\n\n                if (match)\n                {\n                    // Normalize hex string, remove 0x or # prefix\n                    value = `#${match[2]}`;\n                }\n            }\n\n            const color = colord(value as AnyColor);\n\n            if (color.isValid())\n            {\n                const { r, g, b, a } = color.rgba;\n\n                components = [r / 255, g / 255, b / 255, a];\n            }\n        }\n\n        // Cache normalized values for rgba and hex integer\n        if (components)\n        {\n            this._components.set(components);\n            this.refreshInt();\n        }\n        else\n        {\n            throw new Error(`Unable to convert color ${value}`);\n        }\n    }\n\n    /** Refresh the internal color rgb number */\n    private refreshInt(): void\n    {\n        const [r, g, b] = this._components;\n\n        this._int = (((r * 255) << 16) + ((g * 255) << 8) + (b * 255 | 0));\n    }\n}\n"],"names":["extend","namesPlugin","colord"],"mappings":"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"}